import streamlit as st
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime
import io

# Seitenkonfiguration
st.set_page_config(
    page_title="Betriebsanweisungs-Generator",
    page_icon="‚ö†Ô∏è",
    layout="wide"
)

# Custom CSS
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    h1 {
        color: white !important;
        text-align: center;
        padding: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    .subtitle {
        color: white;
        text-align: center;
        font-size: 1.2em;
        margin-bottom: 30px;
    }
    .stButton>button {
        width: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 15px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 10px;
    }
    .success-box {
        background-color: #d4edda;
        border: 2px solid #28a745;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 2px solid #ffc107;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
    }
    </style>
""", unsafe_allow_html=True)

# Vorlagen f√ºr verschiedene Betriebsanweisungskategorien
VORLAGEN = {
    "maschine": {
        "name": "‚öôÔ∏è Maschinen und Anlagen",
        "farbe": colors.HexColor("#FF6B35"),
        "beispiele": {
            "anwendungsbereich": "Bedienung der CNC-Fr√§smaschine im Produktionsbereich",
            "gefahren": "‚Ä¢ Quetschgefahr durch bewegliche Maschinenteile\n‚Ä¢ Verletzungsgefahr durch Sp√§ne\n‚Ä¢ L√§rmbelastung\n‚Ä¢ Gefahr durch rotierende Werkzeuge",
            "schutzmassnahmen": "‚Ä¢ Schutzeinrichtungen d√ºrfen nicht entfernt werden\n‚Ä¢ Geh√∂rschutz und Schutzbrille tragen\n‚Ä¢ Lange Haare zusammenbinden\n‚Ä¢ Keine weite Kleidung tragen\n‚Ä¢ Nur eingewiesene Personen d√ºrfen die Maschine bedienen",
            "stoerungen": "‚Ä¢ Maschine sofort ausschalten (NOT-AUS)\n‚Ä¢ Vorgesetzten informieren\n‚Ä¢ Nicht selbst reparieren\n‚Ä¢ Maschine gegen Wiedereinschalten sichern\n‚Ä¢ St√∂rung dokumentieren",
            "unfaelle": "‚Ä¢ Verletzte Person aus dem Gefahrenbereich bringen\n‚Ä¢ Erste Hilfe leisten\n‚Ä¢ Notruf 112\n‚Ä¢ Durchgangsarzt kontaktieren\n‚Ä¢ Vorgesetzten informieren\n‚Ä¢ Unfallstelle nicht ver√§ndern",
            "instandhaltung": "‚Ä¢ Nur durch befugte Personen\n‚Ä¢ Maschine vor Wartung ausschalten und gegen Wiedereinschalten sichern\n‚Ä¢ Wartungsplan beachten\n‚Ä¢ Wartungsarbeiten dokumentieren",
            "entsorgung": "‚Ä¢ Sp√§ne in vorgesehenen Beh√§ltern sammeln\n‚Ä¢ K√ºhlschmierstoffe ordnungsgem√§√ü entsorgen\n‚Ä¢ Alt√∂l in gekennzeichnete Beh√§lter f√ºllen"
        }
    },
    "gefahrstoff": {
        "name": "‚ò†Ô∏è Gefahrstoffe",
        "farbe": colors.HexColor("#E63946"),
        "beispiele": {
            "anwendungsbereich": "Umgang mit L√∂sungsmitteln in der Lackiererei",
            "gefahren": "‚Ä¢ Gesundheitssch√§dlich bei Einatmen\n‚Ä¢ Reizend f√ºr Augen und Haut\n‚Ä¢ Leichtentz√ºndlich\n‚Ä¢ Umweltgef√§hrdend\n‚Ä¢ Kann Schl√§frigkeit und Benommenheit verursachen",
            "schutzmassnahmen": "‚Ä¢ Nur in gut bel√ºfteten R√§umen verwenden\n‚Ä¢ Atemschutz, Schutzhandschuhe und Schutzbrille tragen\n‚Ä¢ Von Z√ºndquellen fernhalten\n‚Ä¢ Nicht rauchen\n‚Ä¢ Hautkontakt vermeiden\n‚Ä¢ Nach Arbeit H√§nde waschen",
            "stoerungen": "‚Ä¢ Bei Versch√ºtten: R√§umlichkeit l√ºften\n‚Ä¢ Mit Bindemittel aufnehmen\n‚Ä¢ Z√ºndquellen entfernen\n‚Ä¢ Vorgesetzten informieren\n‚Ä¢ Kontaminierte Kleidung wechseln",
            "unfaelle": "‚Ä¢ Bei Hautkontakt: Sofort mit viel Wasser abwaschen\n‚Ä¢ Bei Augenkontakt: 15 Minuten mit Wasser sp√ºlen, Arzt aufsuchen\n‚Ä¢ Bei Einatmen: An die frische Luft, Arzt konsultieren\n‚Ä¢ Notruf 112 bei schweren Vergiftungen\n‚Ä¢ Giftnotruf kontaktieren",
            "instandhaltung": "‚Ä¢ Beh√§lter dicht verschlossen halten\n‚Ä¢ Regelm√§√üige Kontrolle der Lagerbedingungen\n‚Ä¢ Absauganlage warten\n‚Ä¢ Nur Originalbeh√§lter verwenden\n‚Ä¢ K√ºhl und trocken lagern",
            "entsorgung": "‚Ä¢ Nicht in Ausguss oder M√ºlltonne\n‚Ä¢ In gekennzeichneten Beh√§ltern sammeln\n‚Ä¢ Durch Fachfirma entsorgen lassen\n‚Ä¢ Sicherheitsdatenblatt beachten"
        }
    },
    "taetigkeit": {
        "name": "üë∑ T√§tigkeiten",
        "farbe": colors.HexColor("#457B9D"),
        "beispiele": {
            "anwendungsbereich": "Arbeiten auf Leitern und Ger√ºsten",
            "gefahren": "‚Ä¢ Absturzgefahr aus der H√∂he\n‚Ä¢ Umkippen der Leiter\n‚Ä¢ Herabfallende Gegenst√§nde\n‚Ä¢ Abrutschen auf Sprossen\n‚Ä¢ Elektrische Gef√§hrdung bei Arbeiten an Stromleitungen",
            "schutzmassnahmen": "‚Ä¢ Nur gepr√ºfte Leitern verwenden\n‚Ä¢ Leiter auf festem, ebenen Untergrund aufstellen\n‚Ä¢ Anlegewinkel von 65-75¬∞ einhalten\n‚Ä¢ Nicht auf obersten zwei Sprossen stehen\n‚Ä¢ Absturzsicherung ab 2m H√∂he\n‚Ä¢ Arbeitsbereich absperren\n‚Ä¢ Festes Schuhwerk tragen",
            "stoerungen": "‚Ä¢ Bei besch√§digter Leiter: Nicht verwenden, kennzeichnen\n‚Ä¢ Vorgesetzten informieren\n‚Ä¢ Leiter au√üer Betrieb nehmen\n‚Ä¢ Bei instabilem Untergrund: Arbeit einstellen",
            "unfaelle": "‚Ä¢ Notruf 112\n‚Ä¢ Erste Hilfe leisten\n‚Ä¢ Verletzte Person nicht bewegen bei Verdacht auf Wirbels√§ulenverletzung\n‚Ä¢ Unfallstelle sichern\n‚Ä¢ Zeugen benennen\n‚Ä¢ Durchgangsarzt aufsuchen",
            "instandhaltung": "‚Ä¢ Regelm√§√üige Sichtpr√ºfung vor Benutzung\n‚Ä¢ J√§hrliche Pr√ºfung durch bef√§higte Person\n‚Ä¢ Leitern trocken lagern\n‚Ä¢ Besch√§digungen sofort melden\n‚Ä¢ Pr√ºfplakette kontrollieren",
            "entsorgung": "‚Ä¢ Defekte Leitern fachgerecht entsorgen\n‚Ä¢ Nicht reparieren lassen\n‚Ä¢ Holzleitern: Restm√ºll oder Sperrm√ºll\n‚Ä¢ Aluminiumleitern: Wertstoffhof"
        }
    },
    "biologisch": {
        "name": "ü¶† Biologische Arbeitsstoffe",
        "farbe": colors.HexColor("#2A9D8F"),
        "beispiele": {
            "anwendungsbereich": "Umgang mit biologischen Arbeitsstoffen im Labor",
            "gefahren": "‚Ä¢ Infektionsgefahr durch Krankheitserreger\n‚Ä¢ Allergische Reaktionen\n‚Ä¢ Kontamination\n‚Ä¢ Nadelstichverletzungen\n‚Ä¢ Aerosolbildung",
            "schutzmassnahmen": "‚Ä¢ Laborkittel, Handschuhe und ggf. Atemschutz tragen\n‚Ä¢ Hygienema√ünahmen strikt einhalten\n‚Ä¢ H√§nde desinfizieren\n‚Ä¢ Nicht essen, trinken oder rauchen\n‚Ä¢ Arbeiten in Sicherheitswerkbank\n‚Ä¢ Schutzimpfungen wahrnehmen",
            "stoerungen": "‚Ä¢ Bei Kontamination: Bereich absperren\n‚Ä¢ Desinfektion durchf√ºhren\n‚Ä¢ Biologischen Sicherheitsbeauftragten informieren\n‚Ä¢ Vorfall dokumentieren\n‚Ä¢ Ggf. Arbeitsmediziner konsultieren",
            "unfaelle": "‚Ä¢ Bei Verletzung: Wunde bluten lassen, desinfizieren\n‚Ä¢ Betriebsarzt aufsuchen\n‚Ä¢ Durchgangsarzt bei schweren Verletzungen\n‚Ä¢ Vorfall dokumentieren\n‚Ä¢ Bei Kontamination: Sofort desinfizieren\n‚Ä¢ Postexpositionsprophylaxe pr√ºfen",
            "instandhaltung": "‚Ä¢ Regelm√§√üige Wartung der Sicherheitswerkbank\n‚Ä¢ Autoklavierung von Ger√§ten\n‚Ä¢ Dekontamination der Arbeitsfl√§chen\n‚Ä¢ Funktionspr√ºfung der Sicherheitseinrichtungen\n‚Ä¢ Filterwechsel nach Plan",
            "entsorgung": "‚Ä¢ Autoklavierung von kontaminierten Materialien\n‚Ä¢ Entsorgung in speziellen Biohazard-Beh√§ltern\n‚Ä¢ Durch Fachfirma entsorgen lassen\n‚Ä¢ Kan√ºlen in durchstichsicheren Beh√§ltern\n‚Ä¢ Entsorgungsnachweis f√ºhren"
        }
    }
}

def create_pdf(data):
    """Erstellt PDF-Betriebsanweisung"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=2*cm, bottomMargin=2*cm)
    
    # Styles
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=colors.HexColor("#1a1a1a"),
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=12,
        textColor=colors.white,
        spaceAfter=10,
        spaceBefore=15,
        fontName='Helvetica-Bold',
        alignment=TA_LEFT
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        leading=14,
        fontName='Helvetica'
    )
    
    story = []
    
    # Header
    kategorie = data['kategorie']
    farbe = VORLAGEN[kategorie]['farbe']
    
    story.append(Paragraph("BETRIEBSANWEISUNG", title_style))
    story.append(Spacer(1, 0.5*cm))
    
    # Info-Tabelle
    info_data = [
        ["Arbeitsbereich:", data['arbeitsbereich']],
        ["T√§tigkeit/Maschine:", data['titel']],
        ["Erstellt am:", datetime.now().strftime("%d.%m.%Y")],
        ["Erstellt von:", data['ersteller']]
    ]
    
    info_table = Table(info_data, colWidths=[5*cm, 11*cm])
    info_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor("#333333")),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(info_table)
    story.append(Spacer(1, 1*cm))
    
    # Abschnitte
    abschnitte = [
        ("1. ANWENDUNGSBEREICH", data['anwendungsbereich']),
        ("2. GEFAHREN F√úR MENSCH UND UMWELT", data['gefahren']),
        ("3. SCHUTZMA·∫ûNAHMEN UND VERHALTENSREGELN", data['schutzmassnahmen']),
        ("4. VERHALTEN BEI ST√ñRUNGEN", data['stoerungen']),
        ("5. VERHALTEN BEI UNF√ÑLLEN / ERSTE HILFE", data['unfaelle']),
        ("6. INSTANDHALTUNG / ENTSORGUNG", data['instandhaltung'] + "\n\n" + data['entsorgung'])
    ]
    
    for titel, inhalt in abschnitte:
        heading_data = [[Paragraph(titel, heading_style)]]
        heading_table = Table(heading_data, colWidths=[16*cm])
        heading_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), farbe),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        story.append(heading_table)
        story.append(Spacer(1, 0.3*cm))
        
        if inhalt:
            text_lines = inhalt.replace('\n', '<br/>')
            story.append(Paragraph(text_lines, normal_style))
        
        story.append(Spacer(1, 0.5*cm))
    
    # Unterschriften
    story.append(Spacer(1, 1*cm))
    
    unterschrift_data = [
        ["_" * 40, "_" * 40],
        ["Datum, Unterschrift Ersteller", "Datum, Unterschrift Vorgesetzter"]
    ]
    
    unterschrift_table = Table(unterschrift_data, colWidths=[8*cm, 8*cm])
    unterschrift_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ]))
    
    story.append(unterschrift_table)
    
    doc.build(story)
    buffer.seek(0)
    return buffer

# Hauptanwendung
def main():
    st.markdown("<h1>‚ö†Ô∏è Betriebsanweisungs-Generator</h1>", unsafe_allow_html=True)
    st.markdown("<p class='subtitle'>Erstellen Sie professionelle Betriebsanweisungen f√ºr Ihre Arbeitssicherheit</p>", unsafe_allow_html=True)
    
    # Warnung
    st.markdown("""
        <div class='warning-box'>
            <strong>‚ö†Ô∏è Wichtiger Hinweis:</strong> Betriebsanweisungen sind wichtige Dokumente f√ºr die Arbeitssicherheit. 
            Bitte pr√ºfen Sie alle Angaben sorgf√§ltig und lassen Sie diese von einer Fachkraft f√ºr Arbeitssicherheit freigeben.
        </div>
    """, unsafe_allow_html=True)
    
    # Layout mit zwei Spalten
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("### 1Ô∏è‚É£ Kategorie w√§hlen")
        
        kategorie_option = st.radio(
            "W√§hlen Sie eine Kategorie:",
            options=list(VORLAGEN.keys()),
            format_func=lambda x: VORLAGEN[x]['name'],
            key="kategorie"
        )
        
        st.markdown("---")
        
        if st.button("üìã Beispiel laden", use_container_width=True):
            st.session_state.beispiel_laden = True
        
        if st.button("üîÑ Formular zur√ºcksetzen", use_container_width=True):
            for key in list(st.session_state.keys()):
                if key.startswith('input_'):
                    del st.session_state[key]
            st.session_state.beispiel_laden = False
            st.rerun()
    
    with col2:
        st.markdown("### 2Ô∏è‚É£ Angaben eingeben")
        
        # Initialisiere Beispiel-Werte
        beispiele = VORLAGEN[kategorie_option]['beispiele'] if st.session_state.get('beispiel_laden', False) else {}
        
        with st.form("betriebsanweisung_form"):
            arbeitsbereich = st.text_input(
                "Arbeitsbereich / Abteilung *",
                value=beispiele.get('anwendungsbereich', '').split(' im ')[1] if ' im ' in beispiele.get('anwendungsbereich', '') else '',
                placeholder="z.B. Produktionshalle 2, Werkstatt, Labor",
                key="input_arbeitsbereich"
            )
            
            titel = st.text_input(
                "T√§tigkeit / Maschine / Gefahrstoff *",
                value=beispiele.get('anwendungsbereich', '').split(' im ')[0] if ' im ' in beispiele.get('anwendungsbereich', '') else beispiele.get('anwendungsbereich', ''),
                placeholder="z.B. CNC-Fr√§smaschine, L√∂sungsmittel, Leiterarbeiten",
                key="input_titel"
            )
            
            ersteller = st.text_input(
                "Erstellt von *",
                placeholder="Ihr Name",
                key="input_ersteller"
            )
            
            st.markdown("---")
            
            anwendungsbereich = st.text_area(
                "Anwendungsbereich *",
                value=beispiele.get('anwendungsbereich', ''),
                height=100,
                placeholder="Beschreiben Sie den Anwendungsbereich...",
                key="input_anwendungsbereich"
            )
            
            gefahren = st.text_area(
                "Gefahren f√ºr Mensch und Umwelt *",
                value=beispiele.get('gefahren', ''),
                height=150,
                placeholder="Listen Sie die Gefahren auf...",
                key="input_gefahren"
            )
            
            schutzmassnahmen = st.text_area(
                "Schutzma√ünahmen und Verhaltensregeln *",
                value=beispiele.get('schutzmassnahmen', ''),
                height=150,
                placeholder="Beschreiben Sie die Schutzma√ünahmen...",
                key="input_schutzmassnahmen"
            )
            
            stoerungen = st.text_area(
                "Verhalten bei St√∂rungen *",
                value=beispiele.get('stoerungen', ''),
                height=120,
                placeholder="Was ist bei St√∂rungen zu tun?",
                key="input_stoerungen"
            )
            
            unfaelle = st.text_area(
                "Verhalten bei Unf√§llen / Erste Hilfe *",
                value=beispiele.get('unfaelle', ''),
                height=150,
                placeholder="Erste-Hilfe-Ma√ünahmen und Notfallverhalten...",
                key="input_unfaelle"
            )
            
            instandhaltung = st.text_area(
                "Instandhaltung *",
                value=beispiele.get('instandhaltung', ''),
                height=120,
                placeholder="Wartung und Instandhaltung...",
                key="input_instandhaltung"
            )
            
            entsorgung = st.text_area(
                "Sachgerechte Entsorgung *",
                value=beispiele.get('entsorgung', ''),
                height=120,
                placeholder="Entsorgungshinweise...",
                key="input_entsorgung"
            )
            
            submitted = st.form_submit_button("üìÑ PDF erstellen", use_container_width=True)
            
            if submitted:
                if not all([arbeitsbereich, titel, ersteller, anwendungsbereich, gefahren, 
                           schutzmassnahmen, stoerungen, unfaelle, instandhaltung, entsorgung]):
                    st.error("‚ö†Ô∏è Bitte f√ºllen Sie alle Pflichtfelder aus!")
                else:
                    # PDF erstellen
                    data = {
                        'kategorie': kategorie_option,
                        'arbeitsbereich': arbeitsbereich,
                        'titel': titel,
                        'ersteller': ersteller,
                        'anwendungsbereich': anwendungsbereich,
                        'gefahren': gefahren,
                        'schutzmassnahmen': schutzmassnahmen,
                        'stoerungen': stoerungen,
                        'unfaelle': unfaelle,
                        'instandhaltung': instandhaltung,
                        'entsorgung': entsorgung
                    }
                    
                    with st.spinner('PDF wird erstellt...'):
                        pdf_buffer = create_pdf(data)
                        
                    st.success("‚úÖ PDF erfolgreich erstellt!")
                    
                    st.download_button(
                        label="‚¨áÔ∏è PDF herunterladen",
                        data=pdf_buffer,
                        file_name=f"betriebsanweisung_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )

if __name__ == "__main__":
    main()
